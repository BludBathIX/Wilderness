package Action;

use strict;
use warnings;

our $verbs = {
    give => \&give,
    drop => \&drop,
    take => \&take,
    kill => &kill('kill'),
    slay => &kill('slay'),
    look => \&look,
    have => \&inventory,
    go => \&go,
    quit => sub { exit },
};

sub give {
    my $dungeon = shift;
    my @args = @_;
    my $here = $dungeon->{'things'}{'me'}{'location'};
    return warn "\tGive what to whom?\n" unless @args;
    return warn "\tYou have no $args[0] to give\n" unless $dungeon->{'things'}{'me'}{'inventory'}{$args[0]};
    return warn "\tGive $args[0] to whom?\n" unless defined $args[2];
    # see if this warn spews on characters that do not exist anywhere
    return warn "\tSorry ... there is no $args[2] here\n" unless $dungeon->{'things'}{$args[2]}{'location'} == $here;
    $dungeon->{'things'}{'me'}{'inventory'}{$args[0]}--;
    $dungeon->{'things'}{$args[2]}{'inventory'}{$args[0]}--;
    print "\tYou gave the $args[0] to the $args[2]\n";
}

sub go {
    my $dungeon = shift;
    my $where = shift;
    my $here = $dungeon->{'things'}{'me'}{'location'};
    return warn "\tGo where?\n" unless defined $where;
    return warn "\tCan't go $where from here\n" unless $dungeon->{'things'}{$here}{'exit'}{$where};
    $dungeon->set_location('me', $dungeon->{'things'}{$here}{'exit'}{$where});
    return $dungeon;
}

sub drop {
    my $dungeon = shift;
    my $what = shift;
    my $here = $dungeon->{'things'}{'me'}{'location'};
    --$dungeon->{'things'}{'me'}{'inventory'}{$what} or return warn "\tYou don't have a $what\n";
    $dungeon->{'things'}{$here}{'inventory'}{$what}++;
    print "\tDropped\n";
}

sub take {
    my $dungeon = shift;
    my $what = shift;
    my $here = $dungeon->{'things'}{'me'}{'location'};
    --$dungeon->{'things'}{$here}{'inventory'}{$what} or return warn "\tThere's no $what here\n";
    $dungeon->{'things'}{'me'}{'inventory'}{$what}++;
    print "\tTaken\n";
}

sub inventory {
    my $dungeon = shift;
    my @args = @_;
    for my $have ( keys %{ $dungeon->{'things'}{'me'}{'inventory'} } ) {
        my $how_many = $dungeon->{'things'}{'me'}{'inventory'}{$have} == 1 ? 'a' : $dungeon->{'things'}{'me'}{'inventory'}{$have};
        $have .= 's' if $how_many ne 'a';
        print "\tYou have $how_many $have\n";
    }
}

sub look {
    my $dungeon = shift;
    my @args = @_;
    my $here = $dungeon->{'things'}{'me'}{'location'};
    print "\tYou are in the $here\n";
    for my $around ( keys %{ $dungeon->{'things'}{$here}{'inventory'} } ) {
        my $how_many = $dungeon->{'things'}{$here}{'inventory'}{$around} == 1 ? 'a' : $dungeon->{'things'}{'me'}{'inventory'}{$around};
        $around .= 's' if $how_many ne 'a';
        print "\tYou see $how_many $around on the ground\n";
    }
    for my $actor ( keys %$dungeon ) {
        print "\tThere is a $actor here\n" if ( $dungeon->{'things'}{$actor}{'location'} eq $here && $actor ne 'me' );
    }
    my @exits = keys %{ $dungeon->{'things'}{$here}{'exits'} };
    print ("\tThere are exits leading " . join(', ', @exits) . "\n") if @exits;
}

sub kill {
    my $word = shift;
    return sub {
        my $dungeon = shift;
        my @args = @_;
        return warn "\t\u${word} who with what?\n" unless $args[0];
        $dungeon->{'things'}{'me'}{'inventory'}{$args[2]} or return warn "\tYou don't have a $args[2]\n";
        my $here = $dungeon->{'things'}{'me'}{'location'};
        my $its_at = $dungeon->{'things'}{$args[2]}{'location'} or return warn "\tNo $1 to $word\n";
        $its_at eq $here or return warn "\tThe $1 isn't here\n";

        # now we add its inventory to the room's inventory
        foreach my $item ( keys %{ $dungeon->{'things'}{$args[2]}{'inventory'} } ) {
            $dungeon->{'things'}{$here}{'inventory'}{$item} += $dungeon->{'things'}{$args[2]}{'inventory'}{$item};
            delete $dungeon->{'things'}{$args[2]};
            print "\uYou {$word}ed the $args[2]\n";
        }
    }
}

1;
